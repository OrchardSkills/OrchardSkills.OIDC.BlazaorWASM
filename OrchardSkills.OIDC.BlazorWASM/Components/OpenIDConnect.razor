@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IJSRuntime JSRuntime

<h3>OIDC</h3>
<p>Authorized: @authorized</p>

@if (authorized)
{
  <button class="btn btn-primary" @onclick="Logout">Logout</button>
}
else
{
  <button class="btn btn-primary" @onclick="Login">Login</button>
}
@code {
    private bool authorized = false;

    [Parameter]
    public bool InitialValue { get; set; }

    protected override void OnInitialized()
    {
        var options = new RemoteAuthenticationOptions<OidcProviderOptions>();
        options.ProviderOptions.Authority = "http://localhost:44385/";
        options.ProviderOptions.ClientId = "code_flow_client_id";
        options.ProviderOptions.DefaultScopes.Add("openid");
        options.ProviderOptions.DefaultScopes.Add("profile");
        options.ProviderOptions.DefaultScopes.Add("api");
        options.ProviderOptions.RedirectUri = "http://localhost:44385/signin-callback";
        options.ProviderOptions.PostLogoutRedirectUri = "http://localhost:44385/signout-callback";
        options.ProviderOptions.ResponseMode = "code";
        // var remoteAuthenticationService = new RemoteAuthenticationService<
    }

    private async Task Login() 
    {
        await JSRuntime.InvokeVoidAsync("alert", "Logged in");
        authorized = true;
    }

    private async Task Logout() 
    {
        await JSRuntime.InvokeVoidAsync("alert", "Loggedout");
        authorized = false;
    }
    protected override void OnParametersSet()
    {
        authorized = InitialValue;
    }
}
